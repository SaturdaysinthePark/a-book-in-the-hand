---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title="Blog - A Book in the Hand" description="All blog posts including book reviews and reading lists" />
	</head>
	<body>
		<Header />
		<main>
			<div class="filter-controls">
				<h2 class="filter-title">Filter Reviews</h2>
				<div class="filter-buttons">
					<button class="filter-btn active" data-filter="all">All Reviews</button>
					<button class="filter-btn" data-filter="fiction">Fiction</button>
					<button class="filter-btn" data-filter="nonfiction">Nonfiction</button>
				</div>
			</div>
			<div class="posts-gallery">
				{posts.map((post) => (
					<article class="post-item" data-title={post.data.title.toLowerCase()} data-author={post.data.author ? post.data.author.toLowerCase() : ''} data-book-title={post.data.bookTitle ? post.data.bookTitle.toLowerCase() : ''}>
						<a href={`/blog/${post.id.replace(/\/(\d{2})-/, '/$1/')}/`} class="post-link">
							<div class="post-image">
								{post.data.heroImage ? (
									<img src={post.data.heroImage} alt={post.data.bookTitle || post.data.title} />
								) : (
									<div class="placeholder-image">
										<span>{post.data.postType === 'list' ? '📚' : '📖'}</span>
									</div>
								)}
							</div>
							<div class="post-info">
								<h3>{post.data.bookTitle || post.data.title}</h3>
								{post.data.rating && (
									<div class="rating">
										{Array.from({length: 5}, (_, i) => 
											i < post.data.rating ? '⭐' : '☆'
										).join('')}
									</div>
								)}
								<div class="post-date">
									<FormattedDate date={post.data.pubDate} />
								</div>
							</div>
						</a>
					</article>
				))}
			</div>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem 2rem;
	}


	.posts-gallery {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
		gap: 2rem;
		margin-bottom: 2rem;
	}

	.post-item {
		background: transparent;
		transition: transform 0.2s ease;
	}

	.post-item:hover {
		transform: translateY(-2px);
	}

	.post-item.hidden {
		display: none;
	}

	.post-link {
		text-decoration: none;
		color: inherit;
		display: block;
	}

	.post-image {
		width: 100%;
		aspect-ratio: 2/3;
		background: linear-gradient(135deg, rgba(var(--gray-light), 0.3), rgba(var(--accent), 0.1));
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 8px;
		margin-bottom: 1rem;
		overflow: hidden;
	}

	.post-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.placeholder-image {
		font-size: 3rem;
		color: rgba(var(--gray), 0.6);
	}

	.post-info h3 {
		font-size: 1rem;
		font-weight: 600;
		margin-bottom: 0.5rem;
		color: var(--primary);
		line-height: 1.3;
	}

	.rating {
		font-size: 0.8rem;
		margin-bottom: 0.5rem;
	}

	.post-date {
		font-size: 0.85rem;
		color: rgba(var(--gray-dark), 0.7);
	}

	/* Filter Controls */
	.filter-controls {
		margin-bottom: 2rem;
		padding: 1rem;
		background: var(--paper);
		border-radius: 8px;
		border: 1px solid var(--border);
	}
	
	.filter-title {
		font-size: 1rem;
		font-weight: 600;
		margin-bottom: 0.75rem;
		color: var(--primary);
	}
	
	.filter-buttons {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}
	
	.filter-btn {
		padding: 0.5rem 1rem;
		border: 1px solid var(--border);
		background: var(--background);
		color: var(--primary);
		border-radius: 20px;
		font-size: 0.85rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.filter-btn:hover {
		background: var(--accent);
		color: white;
		border-color: var(--accent);
	}
	
	.filter-btn.active {
		background: var(--accent);
		color: white;
		border-color: var(--accent);
	}
	
	/* Responsive Design */
	@media (max-width: 768px) {
		main {
			padding: 1rem 1rem;
		}
		
		.posts-gallery {
			grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
			gap: 1rem;
		}
		
		.post-info h3 {
			font-size: 0.9rem;
		}
		
		.filter-buttons {
			gap: 0.25rem;
		}
		
		.filter-btn {
			padding: 0.4rem 0.8rem;
			font-size: 0.8rem;
		}
	}
	
	@media (max-width: 480px) {
		main {
			padding: 0.5rem 0.75rem;
		}
		
		.posts-gallery {
			grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
			gap: 0.75rem;
		}
		
		.post-info h3 {
			font-size: 0.8rem;
		}
		
		.filter-controls {
			padding: 0.75rem;
			margin-bottom: 1rem;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const filterButtons = document.querySelectorAll('.filter-btn');
		const postItems = document.querySelectorAll('.post-item');

		filterButtons.forEach(button => {
			button.addEventListener('click', function() {
				const filter = this.dataset.filter;
				
				// Update active button
				filterButtons.forEach(btn => btn.classList.remove('active'));
				this.classList.add('active');
				
				// Filter posts
				postItems.forEach(post => {
					const postType = post.dataset.genre || 'all';
					
					if (filter === 'all') {
						post.style.display = 'block';
					} else if (filter === 'fiction' && postType.includes('fiction')) {
						post.style.display = 'block';
					} else if (filter === 'nonfiction' && postType.includes('nonfiction')) {
						post.style.display = 'block';
					} else {
						post.style.display = 'none';
					}
				});
			});
		});
	});
</script>

